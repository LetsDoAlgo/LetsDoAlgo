isMirror(node a , node b)
{
if(node1==null&& node2==null)
{
	return true;
}
if(node1!=null&&node2!=null&&node1.key==node2.key)
{
return ismirror(node1.left,node2.right)&&ismirror(node1.right,node2.left)
}

return false;
}


permute(string str , int l , int r )
{
	if(l==r)
	{
	cw(str);
	}
	else
	{
		for(int i=l;i<=r;i++)
		{
			str = swap(str,l,i);
			permute(str,l+1,r);
			str = swap(str,l,i);
		}
	}
}

bool anagrams(string str1 , string str2)
{
int n1 = str1.count;
int n2 = str2.count ;
if(n1!=n2)
{
return false;
}

str1.sort();
str2.sort();
for(int i=0;i<n1;i++)
{
if(str1[i]!=str2[j])
{
return false;
}
}
return true;
}

int kthsmallest(int[]arr,int l, itn r, int k)
{
//calaculate no of elememnts
int n = r-l+1;
  if(k>0&&k<=n)
  {
  1.int pos  = paritition(arr,l,r); 
  2.(pos-1==k-1): return arr[pos]
  3.(pos-l>k-1):return kthsmallest(arr,l,pos-1,k);
  4.return kthsmallest(arr,pos+1,r,k-(pos-low+1))


  }
  return int.MaxValue;
}

int partition(int[]arr , int l , int r)
{
   int x = arr[r];
   i=l;
   for(int j = l;j<r;j++)
   {
     if(arr[j]<=x)
	 {
	 temp = arr[i];
	 arr[i] = arr[j];
	 arr[j] = temp;
	 i++;
	 }	 
   }

   temp = arr[i];
   arr[i]  = arr[r];
   arr[r] = temp;
   return i;
}


//print all combinations/subsets 
void combinationUtil(int[] arr, int n , int r , int index , int[] data , int i)
{
	if(index==r)
	{
		for(int j=0;j<r;j++)
		{
			cw(data[j]+"");
		}
		return;
	}

	if(i>=n)
	
		{return;
	}

	data[index] = arr[i];
	//current is included
	combinationUtil(arr,n,r,index+1,data,i+1);
	//current is excluded
	combinationUtil(arr, n , r, index,data ,i+1);
}

void printCombincation(int[] data , int n , int r)
{
//combinations of size r 
//creta temp array 
int[] data = new int[r];
combinationUtil(arr, n , r, 0 , data, 0 );
 
}

/////////////////////////////////////////////////////////
//print all subsequences
void cominations(string input, int index , int[] temp)
{
//first set 1 
//then set 0

if(index==input.length)
{cw(inout, temp);
return;
}
 temp[index]=1;//set current bit
cominations(input, index+1,temp);
temp[index] = 1//unset te current bit
cominations(input,index+1,temp)

}
/////////////////////////////////////////////
combination of size k 

bool[] b1 = new bool[a.length];
void subset(int[] A, int k , int currlen , bool[] used)
{

	if(currlen==k)
	{
	for(int i=0;i<a.lnegth;i++)
	{
		if(used[i]==a.length)
		{
		cw(a[i]);
		}
	}
	if(start==a.leggth)-> return 
	used[start] = true
	subset(a,k,start+1,currlen+1,used)
	used[start] = false
	subset(a,start+1,currlen,used);
}
}

///////////////////////////////////////////////////////

substrings: find all 
int length = input.length;
for(int startpoint =0;startpoint<length;startpoint++)
{
	for (int grps = startpount;grps<length;grps++)
	{
		for(int j= startpoint ;j<grps;j++)
		{
			cw(input.charAt[j]);
		}
		cwl();
	}
}

//////////////////////////////////////////////////////

strings of length n : 

gnerateStrings(int n , int k , int size)
{
	if(n<1)
	{
	print
	return;
	}
	//generate strings of size k 
	for(int i=0;i<k;i++)
	{
		arr[n-1] = i;
		gnerateStrings(n-1,k,size);
	}

}
////////////////////////////////////////////////

subarrays with product less than k 

int start = 0;
int end = 1;
long product= arr[0];
 int count = 0 ;
 while(start<=end && end<=arr.Length)
 {
	if(product<k)
	{
		count+=end-start;
		if(end<arr.length)
		{
			product*=arr[end];
			end++;
        }
		else
		{
		//removing 
		  product/=arr[start++];
		}
	}
 }

 ////////////////////////////////////////////////

 list<string> letterComb(int[] num , int n , string []table)
 {
	List<strin> list= new list<strinf>();
	Queue<string>1 = new Queuue();
	q.add("");

	while(!q.isempty)
	{
	string  s = q.remove();
	if(s.lengthh==n)-> list.add(s)
	else{
	    string val = table[number[s.length]];
		for(int i =0 ;i<val.length;i++)
		{
		q.add(s+val.tocharArr(i));
		}
	         }
	}
 }
////////////////////////////////////////////////////

median of 2 arrays ; 

//////////////////////////////////////////
LCA 
findPath(node root , int n1 , List<int> path)
{
	if(root==null)
	{	
		return false;
	}
	path.add(root.data);
	if(root.data==n)
	{
		return true;
	}
	if(root.left!=null&&findpath(root.left,n,path))
	{	
		return true;
	}
	if(root.right!=null&&findpath(root.right, n ,path))
	{
	return true;
	}

	//if nor present 
	//remove 
	path.remove(path.size()-1)
	return false;
}

findLCAInternal(node root , n1 ,n2)
{
if(!findpath(root,n1,path1)||!findpath(root,n2,path2))
{
	return -1
}

for(int i =0;i<path1.size()&&i<path2.size();i++)
{
	if(!path1.get(i).equals(path2.get(i)))
	{
		break;
	}
}
//retrun the value at that point 
return path1.get(i-1);
}

//////////////////////////////////////////////////
//1. traverse fromroot to n1 nad n2 .in BST
//if matches : lcs: root 
//else : traverse letf and right subtree 
{
if(root==null)
{
	return null;

}
//if BOTH ARE SMALLER THAN
if(node.data>n1&&node.data>n2)
{
	return lca(node.left, n1,n2);
}
if(n1>node.Data&&n2.data)
{
return lca(node.right, n1,n2);
}

return root ;
}

//////////////////////////////////////////////
level order 

Queue<node> q = new Que();
q.push(head);
	while(q.count!=0)
	{
		node temp = q.dequque();
		cw(temp.data);//imp
		if(node.left!=null)
		{
			q.push(temp.left);
		}
		if(node.right!=null)
		{
		q.push(temp.right);
		}
	}

	/////////////////////////////////////////////////////

	printAncestors(Node node , int target)
	{
		if(node==null)
		{return false
		}
		if(node.data==target) return true;
		if(pa(root.left,target)||pa(root.right,target))
		{
			cw(root.data)
			return true;
		}

		retrun false;
	}


	///////////////////////////////////////////////////////////

	prinPaths(NODE node)
	{
		int[] path = new int[1000];
		printpathRec(node,path,0);
	}
	printpathRec(Node node , int[]path,int pathlen)
	{
		if(node==null)
		{
			return;
		}
		path[pathlen] = node.data;
		pathlen++;
		if(node.left==null&&node.right==null)
		{
			printarr(path,pathlen);
		}
		else
		{
			rec(node.left,path,pathlen)
			rec(node.right,path,pathlen)
		}
	}


	////////////////////////////////////////
	in,pre ,post -it , rec 
	successor ,predece
postorder_ 2 stack
postoderder_1 stack


l,r,root
stack<int> s1 ;
stack<int> s2 ;
public void postorder(Node root)
{	
	s1 =  new stack();
	s2= new stack();
	if(root==null)
	{	
		retirn;
	}
	s1.push(root);
	while(s1.count>0)
	{
		var temp = s1.pop();
		s2.push(temp);
		if(temp.left!=null)
		{
			s1.push(temp.left)
		}
		if(temp.right!=null)
		{
			s1.push(temp.right)
		}
	}

	//print all from second stack
	while(s2.count>0)
	{		
		node temp = s2.pop();
		cw(temp.data);
	}
}

////////////////////////////////////////////////
postorder successor 
1. root ==null
2. root==n return null; //extra condition
3. if right is empty , parent is the answer.
4. if not , then get the leftmost child in right sutree of parent .

class node
{
Node left,right , parent 
int value ;
}
Node newnode(int value)
{
	Node temp  = new Node();
	temp.left = null;
	temp.right = null;
	temp.parent = nul;
	temp.value = value;
	return temp;
}

Node posucc(node root , node n)
{
	if(n==root)
	{
		return null;
	}
	Node parent = n.parent ;
	//hum parent ko check karenge 
	//parent ka right null 
	//parent ka right value == n
	if(parent.right==n||parent.right==null)
	{
		return parent ;
	}

	Node curr = parent.right; 
	while(curr.left!=null)
	{
		curr = curr.left;

	}

	return curr;

}
////////////////////////////////////////
public static void search(String txt, String pat) 
    { 
        int M = pat.Length; 
        int N = txt.Length; 
  
        /* A loop to slide pat one by one */
        for (int i = 0; i <= N - M; i++) { 
            int j; 
  
            /* For current index i, check for pattern  
            match */
            for (j = 0; j < M; j++) 
                if (txt[i + j] != pat[j]) 
                    break; 
  
            // if pat[0...M-1] = txt[i, i+1, ...i+M-1] 
            if (j == M) 
                Console.WriteLine("Pattern found at index " + i); 
        } 
    } 
/////////////////////////////////////////
class Node
{
public int charsize = 26;
public Node[] next ;
public bool exist;
public Node(){
next = new Node[charsize];
exist = false;

}
insertTrie(node head , string str)
{
 Node node1 = head;
 var strCharArray = str.ToCharAray();
 for(int i=0;i<str.Length;i++)
 {
 index  = strcharrr[i]-'a';
	if(node1.next[index]==null)
	{
		node1.next[index] = new node();
	}
	node1 = node1.next[index];
 }
 node1.isend = true ;
}

static bool search(string key)
{
	int level ;
	int length = key.length;
	int index;
	trieNode t1 = root;
	for(int i=0;i<key.length;i++)
	{
		index = key[i]-'a';
		if(t1.children[index]==null)
		{
		return false;
		}
		t1=t1.children[index];
	}		
	if(t1!=null&&t1.IsEndOfWord
	{
	return true;
	)
}


if(start<end)
{
int pivpos = partition(arr,start ,end);
qs(arr,start,pivpos-1);
qs(arr,pivpos+1,end);
}

int partition(int[]arr , int start , int end)
{
int pivot = arr[high];
int i =low-1;
  for(int j = start ;j<end;j++)
  {
		 if(arr[j]<pivot)
		 {
		   i++;

			int temp = arr[i];
			arr[i] = arr[j];
			arr[j]  = temp;
		 }
     }
	 int temp1 = arr[i+1]
	 arr[i+1] = arr[high]
	 arr[high] = temp1;
}

//reverse string 
reverse(string str)
{
	strin rev = "";
	var charArr = str.ToCharAarray();
	while(length>=0)
	{
		rev = rev+str[length];
		length--;
	}

	return new string(chararr);
}

Printrightview(node root)
{
if(root==null)
{
return;
}
Queue<Node> q1=new Queue<node>();
q1.Enqueue(root);
while(q1.count!=0)
{
 int n = q1.count;
 for(int i =0;i<n;i++)
 {
 Node temp = q1.Dequeue();
	 if(i==n-1)
	 {
	  console.writeline(temp.data+"");
	 }
	 if(temp.left!=null)
	 {
	  q1.Enqueue(temp.left);
	 }
	 if(temp.right!=null)
	 {
	 q1.Enqueue(temp.right);
	 }

 }
}
}

public int rob(int[] nums){
if(nums==null||nums.length==0)
{
return 0;
}
dp[0]   =nums[0];
dp[1] = math.max(nums[0],nums[1])
for(int i=2;i<dp.LENGTH;i++)
{
dp[i] = Math.max(nums[i]+dp[i-2],dp[i-1]);
}
}

minDistance(int[] dist , bool[] visited)
{
int min = int.MAXvAL ,MIN_INDEX =-1;
for(int i = 0;i<V;i++)
{
if(visisted[i]==false&&dist[i]<=min)
{
	min = dist[i];
	min_index=i;
}
}
}

void JA(int[,] graph , int src)
{
int[] dist = new int[V];
bool[] visited = new bool[V];
for(int i=0;i<V;i++)
{
	
}
}


//pre-order successor of node 
//l r root
//
//1.left : exist -->left child succesor
2.left not exist nd given nodeis left child :




//print paths to given sum in binary tree
list<int> l = new list<int>();
 function sum()
	 if(root==null)
	 return ;
	 l1.add(root.dat);
	 PRINTKPATH(root.left,k)
	 PRINTKPATH(root.riht,k)
	 int f=0;

	 for(int j=path.size()-1;j>=0;j--)
	 {
	 f+=path.get(j);
	 if(f==k)
		print(path,j);
	 }

	 path.remove(path.size()-1);




 //majority 

 //lis

 //peak

 //no of islands 


 //djikshtra
 //finding the shortest path 
 1.graph[m,n]
 2.call djiks(graph,0);
 3.array for shortest dist
 4.array for visietd
 5.initialize 
 6.set src 
 7.loop through all edges 
 8.print 

 //hum : jo bhi min distance vetex hai: usse chalendge : har vertex ki taraf
 int[] dist
 bool[] visisted
 dist[0/src] =0;
 for(int i=0;i<v-1;i++)
 {
 8. int u = mindist(dist,visited)
 9. visited[u] = true;
 10.
	for(int v=0;v<V;v++)
	{
	//visited shouldbe false 
	//there should be an edge from u to v ==> value should not be 0 
		if(!visted[v] && garph[u,v]!=0 && dist[u]!=int.max && dist[u]+graph[u,v]<dist[v])
		{
			dist[v] = dist[u]+graph[u,v];
		}
	}
  }


 for mindist : calculate for those edges with visied ==false
 mindist(int[] dist, int[] visited)
 {
	int min = int.maxval ;int minindex= -1;
	for(int v=0;v<V;v++)
	{
		if(visited[v]==false&&dist[v]<=min)
		{
			min = dist[v];
			min_index = v;

		}
	} 
	return min_index;
 }


 //floyd warsahll





 ////min cost path



 //max profit 



 //graph matrix traverssal 
 //print all paths 
 //starting from 0 index 
 m=3
 n=2
 maxlength = m+n-1
 print(mat,m,n,0,0,new int[maxlen])
 ||||
 starting with 0,0
 i=0;j=0;
 path[0] = m[0,0];
if( i==m-1){
	//can move only col wise 

	for(int k=j+1;k<n;k++)
	{
		path[idx+1]= mat[i,k];
	}
	//print
	retunr;
	}

	if(j==n-1)
	{

	}



	//divide array 
	int[] sum = new int[n];
	array.sort(arr);
	sum[0] = arr[0];
	
	for(int i=1;i<n;i++)
	{
		sum[i] = sum[i-1]+arr[i];
	} 
	int max=arr[n-1];
	int l =0;
	int r = n-1;

	for(int i=1;i<=arr[n-1];i++)
	{
		while(l<=r)
		{
			int m = (l+r)/2;
			if(arr[m]<i)
			{
			}
		}
	}
	or

	//calc leftsum and rightsum from start
	leftsum = 0
	for(i=0;i<n;i++)
	{
	    leftsum+=arr[i]
		int rihgtsum = 0;
	     for (int j = i+1 ; j < n ; j++ ) 
                rightSum += arr[j] ; 
      
            // split point index 
            if (leftSum == rightSum) 
                return i+1 ; 
	}

	
	/calc sum from startand from end 

	 // traverse array element and compute sum 
    // of whole array 
    int leftSum = 0; 
       
    for (int i = 0 ; i < n ; i++) 
        leftSum += arr[i]; 
   
    // again traverse array and compute right  
    // sum and also check left_sum equal to  
    // right sum or not 
    int rightSum = 0; 
       
    for (int i = n-1; i >= 0; i--) 
    { 
        // add current element to right_sum 
        rightSum += arr[i]; 
   
        // exclude current element to the left_sum 
        leftSum -= arr[i] ; 
   
        if (rightSum == leftSum) 
            return i ; 
    } 
   

    // Prints two parts after finding split  
    // point using findSplitPoint() 
    static void printTwoParts(int []arr, int n) 
    { 
        int splitPoint = findSplitPoint(arr, n); 
       
        if (splitPoint == -1 || splitPoint == n ) 
        { 
            Console.Write("Not Possible" ); 
            return; 
        } 
        for (int i = 0; i < n; i++) 
        { 
            if(splitPoint == i) 
                 Console.WriteLine(); 
                   
             Console.Write(arr[i] + " "); 
        } 
    } 

	function equalSumSubaaray()
	i=0;i<n
	{
		leftsum+=arr[i]
		rightsum=0;
		j=i+1;j<n;j++
	    	rightsum+=arr[j]
				if(leftsum==rightsum)
		        return i+1
	}


	//perfect sum problem : 
	//sum==0
	//n==0,sum!=0
	//set[n-1]>sum return isSS(set,n-1,sum)
	//return iss(set,n-1,sum)||iss(set,n-1,sum-set[n-1])

	print2words(int[]arr, int n)
	{
		int point = findsplitpoint(arr,n);
		if(splitpoint==-1||splitpoint ==n)
		{
			return;
		}
	}


	leftsum+=arr[i];
	i=n-1;i>=0;i--
	{
		rightsum+=arr[i]
		leftsum-=arr[i]
		if(leftsum==rightsum)
		{
			return i ;
		}
	}


	//topologicalsort 
	//lexicograph
	
	
	//////////////////////////////////////////////
	//tsp: shortest path that visists every city once and return back to the 
	starting point 
	1. every city as starting and ending point 
	2.start traversing from source to adj nodes
	3.calc cost 
	4.track of min cost stored vall
	5.return min cost 

	bool[] visist = new bool[];
	v[0] = true;
	int and = maxvalue;
	ans = tsp(graph , v , 0 , n, 1,0 ,ans){}
		
		if(count==n&& graph[currpos,0]>0)
		{
			ans = math.min(ans,cost+graph[currpos,0]);
			return ans;
		}
		//traverse for all nodes
		for(int i=0;i<n;i++)
		{
			if(v[i]==false && graph[currpos,i]>0)
			{	
				v[i] = true;
				ans = tsp(graph, v,i,n,count+1,cost+graph[currpos,i],ans);
				v[i] = false;
			}
		}
		return ans;

	}


	//sort using dictionary 
	1. insert in trie 
	2.perform preorder traverssal

	TrieNode root = null;
	class trie
	{
	trie[] char = null;
	string key;
	trie()
	{
		char = new Trie[26];
	}
	}

	insert(trie head , string str)
	{
		trie curr= head;
		for(int i = 0;i<str.length;i++)
		{
			if(curr.char[str.charat[i]-'a']==null)
			{
				curr = curr.char[str.charat[i]-'a'];

			}
		}
		curr.key = str;
	}

	preorder(trie cur)
	{
	//if trie is emoty ...can't do anything 
		if(cur==null)
		{
			return;
		}
		for(int i =0;i<26;i++)
		{
			if(curr.charctaer[i]!=null)
			{
				cw(curr.charctare[i].key)
			}
		 preorder(curr.charcater[i])
		}
	}


	//dfs 
	bool[] visited = new bool[];
	dictionary<int ,bool> visitdict = new dictionary<>();
	foreach(var x in adjlist.keys)
	{
	visitdeict.add(key,false);
	}
	
	DFSUtil(visited ,mat[i,j])
	///////////////////////////////////
	DFSUtil(visited ,stsrtnode)
	{
	   visiteddict[startnode] = true;
	   cw(current)
	   foreach(var item in adjlist[current])
	   {
			if(visited[dict]==false)
			{
				DFSUtil(item,viisted);
			}
	   }
	}


	//bfs 

	void bfs(startnode)
	{
		dict
		foreach key -> Set to false
		Queeu<int> nextnodes = new Queue<int>();
		bfshelper(startnode, visiteddict,nextnodes);
	}

	bfshelper(int current , dictionsry<int ,bool> visiteddict,Queue<int> nextnides)
    {
		if(visited[current])
		{
		return;
		}
		cw(current);
		foreach(var node in adjlist[current])
		{
			if(visiteddict[node]==false)
			{
			nextnodes.enqueue(node);
			}
		}

		if(nextnode.count!=0)
		{
		  bfshelper(nextnoes.dequeue(),visiteddict,nextnodes);
		}
	}


	////////////////////////////////////////////////////

	cycle : 
	1.foreach node -> call cyclichelper class
	foreach(var node in adjlist[current])
	{
		if(!visitdict[item])
		{
			if(cyclehelper(item,visitdict))
			{
			return true
			}
		}


	}
	bool cyclichelper(int curent , dictionary<int ,bool> viited)
	{
		visited[current] = true;
		foreach	(int node in adjlist[currennt])
		{	
			if(!visited[node])
			{
				if(cyclichelper(node,visited ,current))
				{
					return true;
				}
			}
			elseif(node!=parent)
			{	
				return true;
			}
		}
		return false;
	}
	//har parent wise : we will check 
	bool cyclichelper(int curent , dictionary<int ,bool> viited , int parent)
	{	
		
	}

	/////////////////////////////////////////////////////////
	directed graph
	
	IscyclicDirect
	{
		if(adjlist.count==0)
		{
			return false;
		}

	1.dict<int,bool> visiteddict
	2.dict<int,bool> recurdct
	3.set oth values false for each key
	4.aain foreach key --> if not visited --> call cyclichelper
	5.in cyclicherlper fucntion check: containskey or not
	->if(visied[dict]==false)
	{
		set in both to true ;
		freach(var item in adjlist[current])
		{
			if(!visiteddict.cotinkey(item))-> continue;
			if(!visiteddict[item] && cyclichelper(item,visiteddict,recurdict))-->return true;
			else if(recur[item])--> return true;
		}
	}
	} 


	//////////////////////////////////////////
	//max element

	//fruit into basjket 
	//sliding window 

	//max sum root to leaf 
	//maxlen , maxsum
	if(root==null)
	{
		if(maxlen<len)
		{
			maxlen =len;
			maxsum = sum;
		}
		if(maxlen==len&&maxsum<Sum)
		{
			maxsum= sum;
		}
		return;
	}
	sumcalc(root.left,sum+root.data,len+1 );
	sumcalc(root.right,sum+Root.data,len+1);

	//////////////////////////////////////////
	print leaf nodes at level = k


	level = 4;
	if(level==1)
	{
		if(root.left==null||root.right==null)
		{
			cw(root.data);
		}
	}
	if(level>1)
	{
		printleafnode(node.left,level-1);
		printleafnode(node.rigth,level-1);
	}


	/////////////////////////////////////////////////
	Longest subarray with k distinct elemnet

	1. freq array 
	int[] freq = new int[7];
	int start = 0;
	int end = 0;
	int now = 0;
	int l=0;
	for(int i=0;i<n;i++)
	{
		freq[a[i]]++;	
	} 
	if(freq[a[i]]==1) now++;//distinct elements incerease
	while(now>k)
	{
		freq[a[l]]--;
		if(freq[a[l]]==0) now--;
		l++ //inc subsegment mask 
	}
	if(i-l+1>=end-start+1)
	{
		end=i;
		strat=l;
	}
	print from start to end

	////////////////////////////////////

	stack<int> s  = new stack<int>();
	int max_area = 0;
	int tp ;//top os stack
	int area_with_top ;
	int i=0;
	while(i<n)//run throuhg all bars
	{
		s.coun==0||hist[s.peek()<=hist[i]]-->s.push(i++)
		else{ tp = s.peek();
		s.pop();
		//l=s.peek()
		//r=i
		area_wit_top = hist[tp]*(s.count==0?i:i-s.peek()-1)
		if(max_area<are_eith_top)->max_area = are_eith_top
		}	}

		//calculate area with others on top 
		while(s.count>0)
		{
			tp = s.peek();
			s.pop();
			area_wit_top = hist[tp]*(s.count==0?i:i-s.peek()-1)
		if(max_area<are_eith_top)->max_area = are_eith_top
		}
		}

		return max_area;

		////////////////////////////////////////////

		coin change - bfs 
		//iterative 
		Queue<int> q = new queue<int>();
		q.enqueu(x);
		hashset<int> v = new Hashset<int>();
		int d=0
		////////////////////////////////////////////
		job sequening

		1. array.sort();
		2.timeslot[] = new int[]----> initiaize =-1
		3.profit = 0;
		4.deadlinemax= arr.max(x=>x.dead);
		5.har ek item ke liye ---> maxdeadline se compare karenge+ timeslit[j]==-1
		-->id save karenge 
		-->profit add karenge
		-->break;
		6.

		/////////////////////////////////////////////

		 Node root; 
    private List<Integer> path1 = new ArrayList<>(); 
    private List<Integer> path2 = new ArrayList<>(); 
  
    // Finds the path from root node to given root of the tree. 
    int findLCA(int n1, int n2) { 
        path1.clear(); 
        path2.clear(); 
        return findLCAInternal(root, n1, n2); 
    } 
  
    private int findLCAInternal(Node root, int n1, int n2) { 
  
        if (!findPath(root, n1, path1) || !findPath(root, n2, path2)) { 
            System.out.println((path1.size() > 0) ? "n1 is present" : "n1 is missing"); 
            System.out.println((path2.size() > 0) ? "n2 is present" : "n2 is missing"); 
            return -1; 
        } 
  
        int i; 
        for (i = 0; i < path1.size() && i < path2.size(); i++) { 
              
        // System.out.println(path1.get(i) + " " + path2.get(i)); 
            if (!path1.get(i).equals(path2.get(i))) 
                break; 
        } 
  
        return path1.get(i-1); 
    } 
      
    // Finds the path from root node to given root of the tree, Stores the 
    // path in a vector path[], returns true if path exists otherwise false 
    private boolean findPath(Node root, int n, List<Integer> path) 
    { 
        // base case 
        if (root == null) { 
            return false; 
        } 
          
        // Store this node . The node will be removed if 
        // not in path from root to n. 
        path.add(root.data); 
  
        if (root.data == n) { 
            return true; 
        } 
  
        if (root.left != null && findPath(root.left, n, path)) { 
            return true; 
        } 
  
        if (root.right != null && findPath(root.right, n, path)) { 
            return true; 
        } 
  
        // If not present in subtree rooted with root, remove root from 
        // path[] and return false 
        path.remove(path.size()-1); 
  
        return false; 
    } 



	///////////////////////////////////////////////
	ifnodepresent(node root , node node)
	{
		if(root==null)
		return false;

		if(root==node)
		return true;

		return isnodepresent(root.left,node)||isnodepresent(root.right,node);


	}

	findlca(node root , node x ,node y)
		node lca=null;	
		if(ifnodepresent(root,x)&&ifnodepresent(root,y))
			findlca(root,lca,x,y);
			lca lca.node;

findLCA(node root , nodewrapper lca, node x , node y)
	if(root==null)
		return false;
	if(root==x||root==y)
		lca.node = root;
		return true;
	bool left = findlca(root.left,lca,x,y);
	bool right = findlca(root.right,lca,x,y);
	if(left&&right)
		lca.node = root;
	
	return left||right



	printAllSubsetsRec(int[]arr, int n ,List<int> v , int sum)
	{	
	if(sum==0)
		print 
		for(i=0;i<v.count;i++)
			cw(v[i])
		
	}

	A: 
		visited[]
		0->row
		0->col
		m[i,j]==1, !visited
		call dfs(i,j,visited)
		++count

	B:
		int[] rowno = new int[]{};
		int[] colno = new int[]{};
		visited[row,col] = true;
		Traverse for all 8 k neighbours 
		for (int =0;k<8;k++)
		{
			if(issafe(M,row+rowno[k],col+colno[k],visited))
			{
				dfs(m,row+rowno[k],col+colno[k],viisted);
			}
		}


		//maxprice
		int maxprice = data[data.length-1];
		maxprices[maxprice.length-1] = maxprice
		dat.length-2------->0
		{
			
		}

		///////////////////////////////////////
		jumps[0]=0;
		i=1-----<n
			jumps[i]= int.maxval
			j=0;j<i
				if(i<=j+arr[j]&&jumps[j]!=maxval)
					jumps[i] = math.min(jumps[i],jumps[j]+1);
					break;

		return jumps[n-1];

		//////////////////////////////////////////
		
		DetectLoop()
			Hasheste<node> s = new Hashset<Node>();
			while(h!=null)
			{
				if(s.contains(h))
					return true ;

					s.add(h);
					h=h.next;
			}
			return false;



			///////////////////////////
			node dummynode = new node(0);
			node tail = dummmyhead ;
			1. condition null check 
			2. compare data 
			3. check data 
			4. traverse the tail whic is for dummy list and traverse for head a and head s
